name: Security & Dependency Monitoring

on:
  schedule:
    # Run weekly on Mondays at 6 AM UTC
    - cron: '0 6 * * 1'
  workflow_dispatch:

jobs:
  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version-file: .ruby-version
          bundler-cache: true

      - name: Install security tools
        run: |
          gem install bundler-audit
          gem install ruby_audit

      - name: Run Bundler security audit
        run: bundle exec bundler-audit check --update

      - name: Run Ruby security audit
        run: ruby-audit check

      - name: Create issue if vulnerabilities found
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const title = 'ðŸš¨ Security vulnerabilities detected';
            const body = `
            Security vulnerabilities have been detected in the dependencies.
            
            **Action Required:**
            1. Review the security audit output in the [failed workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Update vulnerable gems as recommended
            3. Test the application thoroughly after updates
            4. Close this issue once vulnerabilities are resolved
            
            **Workflow:** ${{ github.workflow }}
            **Run ID:** ${{ github.run_id }}
            **Triggered:** ${{ github.event_name }}
            `;
            
            // Check if an issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'security,dependencies'
            });
            
            const existingIssue = existingIssues.data.find(issue => 
              issue.title.includes('Security vulnerabilities detected')
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'dependencies', 'bug']
              });
            }

  outdated-gems:
    name: Check for Outdated Gems
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version-file: .ruby-version
          bundler-cache: true

      - name: Check for outdated gems
        id: outdated
        run: |
          outdated_gems=$(bundle outdated --parseable)
          if [ -n "$outdated_gems" ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "gems<<EOF" >> $GITHUB_OUTPUT
            echo "$outdated_gems" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Create PR for gem updates
        if: steps.outdated.outputs.found == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const outdatedGems = `${{ steps.outdated.outputs.gems }}`;
            
            const title = 'ðŸ”„ Update outdated gems';
            const body = `
            The following gems have updates available:
            
            \`\`\`
            ${outdatedGems}
            \`\`\`
            
            **Recommended Actions:**
            1. Review the changes and breaking changes for each gem
            2. Update gems incrementally and test thoroughly
            3. Pay special attention to major version updates
            4. Run the full test suite after each update
            
            **Auto-generated by:** ${{ github.workflow }}
            `;
            
            // Check if a similar issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'dependencies'
            });
            
            const existingIssue = existingIssues.data.find(issue => 
              issue.title.includes('Update outdated gems')
            );
            
            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['dependencies', 'enhancement']
              });
            }