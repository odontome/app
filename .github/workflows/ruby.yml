name: Ruby

on:
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - 'master'

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.3
          bundler-cache: true

      - name: Install PostgreSQL client
        run: |
          sudo apt-get -yqq install libpq-dev

      - name: Build App
        env:
          PGHOST: localhost
          PGUSER: postgres
          PGPASSWORD: postgres
          RAILS_ENV: test
        run: |
          bin/rails db:setup

      - name: Run Tests
        env:
          PGHOST: localhost
          PGUSER: postgres
          PGPASSWORD: postgres
          RAILS_ENV: test
        run: |
          # Run tests and capture output
          set +e  # Don't exit on test failures
          bundle exec rake test 2>&1 | tee test_output.txt
          TEST_EXIT_CODE=${PIPESTATUS[0]}
          set -e
          
          # Parse test results from minitest output
          # Expected format: "166 runs, 412 assertions, 0 failures, 0 errors, 0 skips"
          SUMMARY_LINE=$(grep -E "^[0-9]+ runs, [0-9]+ assertions," test_output.txt | tail -1)
          
          if [ -n "$SUMMARY_LINE" ]; then
            TOTAL_TESTS=$(echo "$SUMMARY_LINE" | sed -E 's/^([0-9]+) runs,.*/\1/')
            FAILURES=$(echo "$SUMMARY_LINE" | sed -E 's/.*[, ]([0-9]+) failures.*/\1/' | grep -E '^[0-9]+$' || echo "0")
            ERRORS=$(echo "$SUMMARY_LINE" | sed -E 's/.*[, ]([0-9]+) errors.*/\1/' | grep -E '^[0-9]+$' || echo "0")
            SKIPS=$(echo "$SUMMARY_LINE" | sed -E 's/.*[, ]([0-9]+) skips.*/\1/' | grep -E '^[0-9]+$' || echo "0")
          else
            TOTAL_TESTS="0"
            FAILURES="0"
            ERRORS="0"
            SKIPS="0"
          fi
          
          # Calculate passed tests
          PASSED=$((TOTAL_TESTS - FAILURES - ERRORS - SKIPS))
          
          # Create test summary
          echo "## Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Count |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Total Tests** | $TOTAL_TESTS |" >> $GITHUB_STEP_SUMMARY
          echo "| **Passed** | $PASSED |" >> $GITHUB_STEP_SUMMARY
          echo "| **Failed** | $FAILURES |" >> $GITHUB_STEP_SUMMARY
          echo "| **Errors** | $ERRORS |" >> $GITHUB_STEP_SUMMARY
          echo "| **Skipped** | $SKIPS |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Add status badge and annotations
          if [ $TEST_EXIT_CODE -eq 0 ]; then
            echo "### ✅ All tests passed!" >> $GITHUB_STEP_SUMMARY
            echo "::notice title=Test Results::All $TOTAL_TESTS tests passed successfully!"
          else
            echo "### ❌ Tests failed" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "#### Failed Test Details:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            grep -A 10 -B 2 "FAIL\|ERROR" test_output.txt || echo "Check test output for details" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            
            # Add error annotations for visibility
            echo "::error title=Test Failures::$FAILURES test(s) failed, $ERRORS error(s) occurred out of $TOTAL_TESTS total tests"
            
            # Add individual failure annotations
            grep -n "FAIL\|ERROR" test_output.txt | head -5 | while IFS=: read -r line_num content; do
              echo "::warning title=Test Failure::$content"
            done || true
          fi
          
          # Exit with the original test exit code
          exit $TEST_EXIT_CODE

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        if: always()  # Upload even if tests fail
        with:
          name: test-results
          path: test_output.txt
          retention-days: 30
