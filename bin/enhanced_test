#!/bin/bash
# Enhanced test runner script for local development and CI

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo_info() {
    echo -e "${GREEN}[INFO]${NC} $1"
}

echo_warn() {
    echo -e "${YELLOW}[WARN]${NC} $1"
}

echo_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Default options
RUN_QUALITY=true
RUN_SECURITY=true
RUN_TESTS=true
RUN_COVERAGE=false
PARALLEL=false
PROFILE=false

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --no-quality)
            RUN_QUALITY=false
            shift
            ;;
        --no-security)
            RUN_SECURITY=false
            shift
            ;;
        --no-tests)
            RUN_TESTS=false
            shift
            ;;
        --coverage)
            RUN_COVERAGE=true
            shift
            ;;
        --parallel)
            PARALLEL=true
            shift
            ;;
        --profile)
            PROFILE=true
            shift
            ;;
        --fast)
            RUN_SECURITY=false
            RUN_COVERAGE=false
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [options]"
            echo "Options:"
            echo "  --no-quality    Skip code quality checks"
            echo "  --no-security   Skip security audit"
            echo "  --no-tests      Skip running tests"
            echo "  --coverage      Enable test coverage reporting"
            echo "  --parallel      Run tests in parallel"
            echo "  --profile       Enable test profiling"
            echo "  --fast          Skip slow checks (security + coverage)"
            echo "  -h, --help      Show this help message"
            exit 0
            ;;
        *)
            echo_error "Unknown option: $1"
            exit 1
            ;;
    esac
done

echo_info "Starting enhanced test suite..."

# Check if database exists and is accessible
if command -v pg_isready &> /dev/null; then
    if ! pg_isready -h ${PGHOST:-localhost} -p ${PGPORT:-5432} -U ${PGUSER:-postgres} &> /dev/null; then
        echo_warn "PostgreSQL is not ready. Tests may fail."
    fi
fi

# Install missing gems if needed
if [ ! -d "vendor/bundle" ] && [ ! -f "Gemfile.lock" ]; then
    echo_info "Installing dependencies..."
    bundle install
fi

# Code quality checks
if [ "$RUN_QUALITY" = true ]; then
    echo_info "Running code quality checks..."
    if bundle exec rubocop --parallel --format progress; then
        echo_info "âœ“ Code quality checks passed"
    else
        echo_error "âœ— Code quality checks failed"
        exit 1
    fi
fi

# Security audit
if [ "$RUN_SECURITY" = true ]; then
    echo_info "Running security audit..."
    
    # Install bundler-audit if not available
    if ! gem list bundler-audit -i &> /dev/null; then
        gem install bundler-audit
    fi
    
    if bundle exec bundler-audit check --update; then
        echo_info "âœ“ Security audit passed"
    else
        echo_error "âœ— Security vulnerabilities found"
        exit 1
    fi
fi

# Database setup
if [ "$RUN_TESTS" = true ]; then
    echo_info "Setting up test database..."
    RAILS_ENV=test bundle exec rails db:create db:schema:load &> /dev/null || {
        echo_warn "Database setup had issues, trying migration..."
        RAILS_ENV=test bundle exec rails db:migrate &> /dev/null || true
    }
fi

# Run tests
if [ "$RUN_TESTS" = true ]; then
    echo_info "Running tests..."
    
    # Set up test options
    TEST_OPTS=""
    if [ "$PROFILE" = true ]; then
        TEST_OPTS="--profile=10"
    fi
    
    # Set up environment
    export RAILS_ENV=test
    if [ "$RUN_COVERAGE" = true ]; then
        export COVERAGE=true
        echo_info "Coverage reporting enabled"
    fi
    
    if [ "$PARALLEL" = true ]; then
        echo_info "Running tests in parallel..."
        # Run different test types in parallel
        bundle exec rails test:units &
        UNIT_PID=$!
        bundle exec rails test:functionals &
        FUNCTIONAL_PID=$!
        bundle exec rails test:integration &
        INTEGRATION_PID=$!
        
        wait $UNIT_PID $FUNCTIONAL_PID $INTEGRATION_PID
        if [ $? -eq 0 ]; then
            echo_info "âœ“ All parallel tests passed"
        else
            echo_error "âœ— Some tests failed"
            exit 1
        fi
    else
        if TESTOPTS="$TEST_OPTS" bundle exec rails test; then
            echo_info "âœ“ All tests passed"
        else
            echo_error "âœ— Tests failed"
            exit 1
        fi
    fi
fi

# Coverage reporting
if [ "$RUN_COVERAGE" = true ] && [ -d "coverage" ]; then
    echo_info "Coverage report generated in coverage/ directory"
    if command -v open &> /dev/null; then
        echo_info "Opening coverage report..."
        open coverage/index.html
    fi
fi

echo_info "All checks completed successfully! ðŸŽ‰"